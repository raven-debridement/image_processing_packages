#!/usr/bin/env python

import roslib
roslib.load_manifest('anaglyph')
import datetime
import sys
import rospy
import cv
import cv2
from std_msgs.msg import String
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError
import argparse
import numpy as np

DELTA = 8

class Getch:
	"""Gets a single character from standard input.  Does not echo to the screen.
	
	Example usage:
	
	getch = Getch()
	
	ch = None
	while True:
	    ch = getch('Hit a key')
	    if Getch.is_ctrl_c(ch):
	        break
	    print 'got ch:', ch
	exit = getch.yesno('Are you sure you want to exit?')"""
	@staticmethod
	def is_ctrl_c(ch):
		return ord(ch) == 3
		
	class _GetchWindows:
		def __init__(self):
			import msvcrt
	
		def __call__(self):
			import msvcrt
			return msvcrt.getch()
	class _GetchUnix:
		def __init__(self):
			import tty, sys
	
		def __call__(self):
			import sys, tty, termios
			fd = sys.stdin.fileno()
			old_settings = termios.tcgetattr(fd)
			try:
				tty.setraw(sys.stdin.fileno())
				ch = sys.stdin.read(1)
			finally:
				termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
			return ch
	
	def __init__(self):
		try:
			self.impl = Getch._GetchWindows()
		except ImportError:
			self.impl = Getch._GetchUnix()

	def __call__(self,prompt = None,yesno=False):
		if prompt:
			import sys
			print prompt,
			sys.stdout.flush()
		ch = self.impl()
		if prompt:
			print ''
		if yesno:
			return ch.lower() == 'y'
		else:
			return ch
	
	def yesno(self,prompt = None):
		return self(prompt=prompt,yesno=True)

class stereogram_converter:

    def __init__(self, publish_topic, left_image_topic, right_image_topic, width_crop, height_crop, padding_scale):
        self.image_pub = rospy.Publisher(publish_topic,Image)

        #cv.NamedWindow("Image window", 1)
        self.bridge = CvBridge()
        self.left_sub = rospy.Subscriber(left_image_topic, Image, self.left_callback)
	self.right_sub = rospy.Subscriber(right_image_topic, Image, self.right_callback)
	self.left = False
	self.right = False
	self.out = False
	self.width_crop = width_crop
	self.height_crop = height_crop
        self.leftPresent=False
        self.rightPresent=False

        self.paddingScale = padding_scale
        self.paddingWidth = None
        self.paddingHeight = None

	cv.NamedWindow("Name", cv.CV_WINDOW_NORMAL);
    	cv2.setWindowProperty("Name", cv2.WND_PROP_FULLSCREEN, cv2.cv.CV_WINDOW_FULLSCREEN);
   	
    def left_callback(self,data):
        try:
            if not self.leftPresent:
                    self.left = self.bridge.imgmsg_to_cv(data, "bgr8")
                    self.leftPresent = True
                    self.process()
        except CvBridgeError, e:
            print e
	
    def right_callback(self, data):
	try:
            if not self.rightPresent:
                    self.right = self.bridge.imgmsg_to_cv(data, "bgr8")
                    self.rightPresent = True
                    self.process()
	except CvBridgeError, e:
	    print e

    def change_width_crop(self, delta):
	self.width_crop += delta
        if self.width_crop < 0:
                self.width_crop = 0

    def change_height_crop(self, delta):
	self.height_crop += delta
        if self.height_crop < 0:
                self.height_crop = 0

    def process(self):
	if self.leftPresent!=False and self.rightPresent!=False:

	    w = int((self.width_crop)/2)
	    h = int((self.height_crop)/2)

            leftHeight = self.left.rows - h
            leftWidth = self.left.cols - w
            rightHeight = self.right.rows - h
            rightWidth = self.right.cols - w
            paddingWidth = int(leftWidth * self.paddingScale)
            paddingHeight = int(leftHeight * self.paddingScale)
            print "WH ", self.width_crop, self.height_crop


	    self.out = cv.CreateMat(2*paddingHeight + leftHeight, 2*paddingWidth + leftWidth + 2*paddingWidth + rightWidth, self.left.type)

	    # self.out[paddingHeight:(paddingHeight+leftHeight), paddingWidth:(paddingWidth+leftWidth)] = self.left[0:leftHeight, w:(w+leftWidth)]
	    # self.out[paddingHeight:(paddingHeight+rightHeight), (3*paddingWidth+leftWidth):(3*paddingWidth+leftWidth+rightWidth)] = self.right[0:rightHeight, 0:rightWidth]

	    subRectLeft = cv.GetSubRect(self.out, (paddingWidth, paddingHeight, leftWidth, leftHeight))
	    subRectRight = cv.GetSubRect(self.out, (3*paddingWidth + leftWidth, paddingHeight, rightWidth, rightHeight))
            croppedLeft = cv.GetSubRect(self.left,  (w, 0, leftWidth, leftHeight))
            croppedRight = cv.GetSubRect(self.right, (0, 0, rightWidth, rightHeight))

	    cv.Copy(croppedLeft, subRectLeft)
            cv.Copy(croppedRight, subRectRight)

	    cv.ShowImage("Name", self.out);
	    cv.WaitKey(1)

	    self.leftPresent = False
	    self.rightPresent = False
	    self.left = None
	    self.right = None

def main(args):
    publish_topic = "stereogram_images"
    left_image_topic = 'left_image_topic'
    parser = argparse.ArgumentParser()
    parser.add_argument('--horizontal',type=int,default=640)
    parser.add_argument('--vertical',type=int,default=0)
    parser.add_argument('--padding',type=float,default=0.75)
    args = parser.parse_args(rospy.myargv()[1:])
    width_crop = args.horizontal
    height_crop = args.vertical
    padding_scale = args.padding
    right_image_topic = 'right_image_topic' 
    sc = stereogram_converter(publish_topic, left_image_topic, right_image_topic, width_crop, height_crop, padding_scale)
    rospy.init_node('stereogram_converter', anonymous=True)
    print "USE THE period AND comma KEYS TO CHANGE THE HORIZONTAL BASELINE BETWEEN THE LEFT AND RIGHT IMAGES, AND USE THE / AND ' KEYS TO CHANGE THE VERTICAL DISPARITY"
    try:
	getch = Getch()
        while not rospy.is_shutdown():
   	    ch = getch('Hit a key')
	    if ord(ch)==44:
		sc.change_width_crop(DELTA)
	    elif ord(ch)==46:
		sc.change_width_crop(-DELTA)
	    elif ord(ch)==39:
		sc.change_height_crop(DELTA)
	    elif ord(ch)==47:
		sc.change_height_crop(-DELTA)
 	    if Getch.is_ctrl_c(ch):
		rospy.signal_shutdown('shutting down')
	        break
    except KeyboardInterrupt:
        print "Shutting down"
    cv.DestroyAllWindows()

if __name__ == '__main__':
    main(sys.argv)
