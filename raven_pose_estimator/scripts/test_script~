#!/usr/bin/env python

import cv
import cv2
import numpy
import math
from std_msgs.msg import String
from sensor_msgs.msg import Image, CameraInfo
from cv_bridge import CvBridge, CvBridgeError
from geometry_msgs.msg import Point, PointStamped
import tf
import image_geometry

#takes in an input IplImage and two cv.Scalars for the upper and lower hsv values
#returns a thresholded image
def threshold(inputImage, lowerBound, upperBound):
	hsvImg = cv.CreateImage(cv.GetSize(inputImage), 8, 3)
	cv.CvtColor(inputImage, hsvImg, cv.CV_BGR2HSV)
	threshImg = cv.CreateImage(cv.GetSize(hsvImg), 8, 1)
	cv.InRangeS(hsvImg, lowerBound, upperBound, threshImg)
	return threshImg

#takes in an input binary image and counts number of pixels that are equal to 0
def countPixels(threshImg):
	return cv.CountNonZero(threshImg)

def skeletonize(img):
	print "here"

def webcam():	
	color1 = "red"
	red_lower = cv.Scalar(0, 50, 150)
	red_upper = cv.Scalar(2, 150, 250)
	color3 = "green"
	green_lower = cv.Scalar(50, 50, 30)
	green_upper = cv.Scalar(90, 150, 130)
	numBits = 8
	numChannels = 3
	capture = cv.CaptureFromCAM(1)
	while True:
		frame = cv.QueryFrame(capture)
		cv.Smooth(frame, frame, cv.CV_GAUSSIAN, 3, 0)
		thresh = cv.CreateImage(cv.GetSize(frame), 8, 1)
		threshred = threshold(frame, red_lower, red_upper) 
		#threshgreen = threshold(frame, green_lower, green_upper)
		#intermediate2 = cv.CreateImage(cv.GetSize(frame), 8, 1)
		#cv.Erode(threshgreen, threshgreen, None, 3)
        #cv.Dilate(threshgreen, threshgreen, None, 5) 
		#print "Ratio green to red"
		#print "%d:%d"%(countPixels(threshgreen), countPixels(threshred))
		
		hough = cv.CreateMemStorage()
		edges = cv.CreateImage(cv.GetSize(frame), 8, 1)
		temp = cv.CreateImage(cv.GetSize(frame), 8, 1)
		done = True
		element = 1
		cv.Canny(threshred, edges, 0.5, 5.0)
		for i in range(3):
 			cv.Dilate(edges, edges, None, 2)
			cv.Erode(edges, edges, None, 2)
		#cv.Add(cv.GetMat(threshgreen), cv.GetMat(threshred), intermediate2)
		lines = cv.HoughLines2(edges, hough, cv.CV_HOUGH_PROBABILISTIC, 1, 1, 1)
		"""for i in range(len(lines)):
			print lines[i]
		for i in range(len(lines)):
			rho = lines[i][0]
			theta = lines[i][1]
			print rho
			print theta
			a = math.cos(float(theta))
			b = math.sin(float(theta))
			x0 = a*rho
			y0 = b*rho
			pt1 = (cv.Round(x0 + 1000*(-b)), cv.Round(y0 + 1000*(a)))
			pt2 = (cv.Round(x0 - 1000*(-b)), cv.Round(y0 - 1000*(a)))
			cv.Line( edges, pt1, pt2, cv.Scalar(0,0,255))"""

		"""matrix = numpy.asarray(cv.GetMat(edges))
		mean, eigenvectors = cv2.PCACompute(matrix) #PCA
		if eigenvectors.any():
			print "mean"
			print mean
			print "eigenvectors"
			print eigenvectors"""

		"""if len(lines) > 0:
			sum_rhos = 0
			sum_thetas = 0
			for rho, theta in lines[0]:
				sum_rhos += rho
				sum_thetas += theta
			avg_rho = sum_rhos/len(lines[0])
			avg_theta = sum_thetas/len(lines[0])
			print "averages"
			print "\tavg rho: %d"%avg_rho
			print "\tavg theta: %d"%avg_theta"""
		cv.ShowImage("Original", frame)
		cv.ShowImage("Threshholded", threshred)
		cv.ShowImage("Edges", edges)
		cv.WaitKey(3)

if __name__ == '__main__':
    webcam()
