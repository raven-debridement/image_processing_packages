#!/usr/bin/env python

import rospy
import tf
import image_geometry
from ar_pose.msg import ARMarker
from ar_pose.msg import ARMarkers
from geometry_msgs.msg import PoseWithCovariance
from geometry_msgs.msg import Pose
from geometry_msgs.msg import PoseStamped

#FIXME change the value of camera id in the launch file
#FIXME figure out how camera to ground transformations are going to work; figure out the actual values

#global dictionary that maps from id number to an actual position on the robot
ids_to_joints = {1: "left shoulder",
		 2: "left end",
		 3: "right shoulder",
		 4: "right end"}

class PoseEstimator:
    def __init__(self, frame, camera):
	self.left_point_subscriber = rospy.Subscriber("left_ar_markers", ARMarkers, left_handle_markers)
        self.right_point_subscriber = rospy.Subscriber("right_ar_markers", ARMarkers, right_handle_markers)
   	self.joint_pose_publisher = rospy.Publisher("joints_and_poses", JointsAndPoses)
	self.transform_listener = tf.TransformListener()
	self.right_poses_dict = {}
	self.left_poses_dict = {}
	self.joints_and_poses = JointsAndPoses()
	self.output_frame = frame
	self.camera_id = camera

    # called when a list of AR markers is published for the right camera
    # stores poses in a dictionary that maps from id number to pose
    def right_handle_markers(self, right_markers):
	for marker in right_markers.markers:
	    self.right_poses_dict[marker.id] = marker.pose.pose
	self.handle_both()	

    # called when a list of AR markers is published for the left camera
    # stores poses in a dictionary that maps from id number to pose
    def left_handle_markers(self, left_markers):
	for marker in left_markers.markers:
	    self.left_poses_dict[marker.id] = marker.pose.pose
	self.handle_both()

    # waits until there are values in both right_poses_dict and left_poses_dict
    # calls helper functions to calculate more accurate poses, and publishes those poses
    # then clears the dictionaries
    def handle_both(self):
	if self.right_poses_dict and self.left_poses_dict:
	    self.calculate_poses()
	    self.publish()
	    self.left_poses_dict = {}
	    self.right_poses_dict = {}	    	    
    
    # goes through the poses in the right_poses_dict and the left_poses_dict and calculates 
    # a more accurate value for them; calls the helper function convert_stereo
    def calculate_poses(self):
	joints = []
	poses = []
	for id_number in self.right_poses_dict.keys():
	    if id_number in self.left_poses_dict.keys():
		joints.append(ids_to_joints[id_number])
		poses.append(self.convert_stereo(left_poses_dict[id_number], right_poses_dict[id_number])) 
	self.joints_and_poses.joints = joints
	self.joints_and_poses.poses = poses

    # publishes the message with joints and poses
    def publish(self):
	self.joint_pose_publisher.publish(self.joints_and_poses)
	self.joints_and_poses = JointsAndPoses()	

    # takes in two poses and returns a more accurate pose based on their values 
    # uses the stereo_model object from the image_geometry module for calculations
    def convert_stereo(self,p1,p2):
        u = p1.position.x
        v = p2.position.y
        disparity = p1.position.x - p2.position.x
        
        stereo_model = image_geometry.StereoCameraModel()
        stereo_model.fromCameraInfo(left.camera_info,right.camera_info)
        (x,y,z) = stereo_model.projectPixelTo3d((u,v),disparity)
        accurate_pose = PoseStamped()
        accurate_pose.header.stamp = rospy.Time.now()
        accurate_pose.pose.point.x = x
        accurate_pose.pose.point.y = y
        accurate_pose.pose.point.z = z
	accurate_pose.orientation.x = p1.orientation.x
	accurate_pose.orientation.y = p1.orientation.y
	accurate_pose.orientation.z = p1.orientation.z
	accurate_pose.orientation.w = p1.orientation.w
	self.transform_listener.waitForTransform(self.output_frame, self.camera_id, rospy.Time.now(), rospy.Duration(4.0))
	output_pose = self.listener.transformPose(self.output_frame, accurate_pose)
        return output_pose


def main():
    rospy.init_node("pose_estimator")
    outputframe = rospy.get_param('~output_frame',"output_frame_default")
    camera_id = rospy.get_param('~camera_id', "camera")
    p = PoseEstimator(outputframe, camera_id)
    rospy.spin()


if __name__=='__main__':
    main()


