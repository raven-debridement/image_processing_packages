/* Auto-generated by genmsg_cpp for file /home/annal/src/image_processing_packages/raven_pose_estimator/srv/ThreshRed.srv */
#ifndef RAVEN_POSE_ESTIMATOR_SERVICE_THRESHRED_H
#define RAVEN_POSE_ESTIMATOR_SERVICE_THRESHRED_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace raven_pose_estimator
{
template <class ContainerAllocator>
struct ThreshRedRequest_ {
  typedef ThreshRedRequest_<ContainerAllocator> Type;

  ThreshRedRequest_()
  : input(0)
  {
  }

  ThreshRedRequest_(const ContainerAllocator& _alloc)
  : input(0)
  {
  }

  typedef int8_t _input_type;
  int8_t input;


  typedef boost::shared_ptr< ::raven_pose_estimator::ThreshRedRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::raven_pose_estimator::ThreshRedRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ThreshRedRequest
typedef  ::raven_pose_estimator::ThreshRedRequest_<std::allocator<void> > ThreshRedRequest;

typedef boost::shared_ptr< ::raven_pose_estimator::ThreshRedRequest> ThreshRedRequestPtr;
typedef boost::shared_ptr< ::raven_pose_estimator::ThreshRedRequest const> ThreshRedRequestConstPtr;


template <class ContainerAllocator>
struct ThreshRedResponse_ {
  typedef ThreshRedResponse_<ContainerAllocator> Type;

  ThreshRedResponse_()
  : output(0)
  {
  }

  ThreshRedResponse_(const ContainerAllocator& _alloc)
  : output(0)
  {
  }

  typedef int8_t _output_type;
  int8_t output;


  typedef boost::shared_ptr< ::raven_pose_estimator::ThreshRedResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::raven_pose_estimator::ThreshRedResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ThreshRedResponse
typedef  ::raven_pose_estimator::ThreshRedResponse_<std::allocator<void> > ThreshRedResponse;

typedef boost::shared_ptr< ::raven_pose_estimator::ThreshRedResponse> ThreshRedResponsePtr;
typedef boost::shared_ptr< ::raven_pose_estimator::ThreshRedResponse const> ThreshRedResponseConstPtr;

struct ThreshRed
{

typedef ThreshRedRequest Request;
typedef ThreshRedResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct ThreshRed
} // namespace raven_pose_estimator

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::raven_pose_estimator::ThreshRedRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::raven_pose_estimator::ThreshRedRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::raven_pose_estimator::ThreshRedRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1491ea77b99fb7b24d088237597e6386";
  }

  static const char* value(const  ::raven_pose_estimator::ThreshRedRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1491ea77b99fb7b2ULL;
  static const uint64_t static_value2 = 0x4d088237597e6386ULL;
};

template<class ContainerAllocator>
struct DataType< ::raven_pose_estimator::ThreshRedRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "raven_pose_estimator/ThreshRedRequest";
  }

  static const char* value(const  ::raven_pose_estimator::ThreshRedRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::raven_pose_estimator::ThreshRedRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int8 input\n\
\n\
";
  }

  static const char* value(const  ::raven_pose_estimator::ThreshRedRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::raven_pose_estimator::ThreshRedRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::raven_pose_estimator::ThreshRedResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::raven_pose_estimator::ThreshRedResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::raven_pose_estimator::ThreshRedResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dac95e5e93a827d01a2335b08084600d";
  }

  static const char* value(const  ::raven_pose_estimator::ThreshRedResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xdac95e5e93a827d0ULL;
  static const uint64_t static_value2 = 0x1a2335b08084600dULL;
};

template<class ContainerAllocator>
struct DataType< ::raven_pose_estimator::ThreshRedResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "raven_pose_estimator/ThreshRedResponse";
  }

  static const char* value(const  ::raven_pose_estimator::ThreshRedResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::raven_pose_estimator::ThreshRedResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int8 output\n\
\n\
\n\
";
  }

  static const char* value(const  ::raven_pose_estimator::ThreshRedResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::raven_pose_estimator::ThreshRedResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::raven_pose_estimator::ThreshRedRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.input);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ThreshRedRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::raven_pose_estimator::ThreshRedResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.output);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ThreshRedResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<raven_pose_estimator::ThreshRed> {
  static const char* value() 
  {
    return "4ba1d3acdddc600edccce3683403edb1";
  }

  static const char* value(const raven_pose_estimator::ThreshRed&) { return value(); } 
};

template<>
struct DataType<raven_pose_estimator::ThreshRed> {
  static const char* value() 
  {
    return "raven_pose_estimator/ThreshRed";
  }

  static const char* value(const raven_pose_estimator::ThreshRed&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<raven_pose_estimator::ThreshRedRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4ba1d3acdddc600edccce3683403edb1";
  }

  static const char* value(const raven_pose_estimator::ThreshRedRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<raven_pose_estimator::ThreshRedRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "raven_pose_estimator/ThreshRed";
  }

  static const char* value(const raven_pose_estimator::ThreshRedRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<raven_pose_estimator::ThreshRedResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4ba1d3acdddc600edccce3683403edb1";
  }

  static const char* value(const raven_pose_estimator::ThreshRedResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<raven_pose_estimator::ThreshRedResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "raven_pose_estimator/ThreshRed";
  }

  static const char* value(const raven_pose_estimator::ThreshRedResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // RAVEN_POSE_ESTIMATOR_SERVICE_THRESHRED_H

